package com.github.jelf.xml;

import android.test.AndroidTestCase;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Created by jelf on 15.10.2014.
 * This test is mostly an example of building a tag factory.
 */

/**
 * This class describes an `a` tag, which allows any text and remembers `href` parameter (and only)
 */
class ATagFactory implements TagAcceptorFactory {

    /**
     * Declared final to speed up instanceof
     */
    final class ATag extends SimpleTagAcceptor {

        private String href=null;
        private String value=null;
        /**
         * Adds parameter to a tag
         *
         * @param name  parameter name
         * @param value parameter value
         * @throws com.github.jelf.xml.XmlParserException on fatal errors
         */
        @Override
        public void addParam(@NotNull String name, @Nullable String value) throws XmlParserException {
            if("href".equals(name)) {
                href=value;
                return;
            }
        }

        /**
         * Adds nested tag.
         *
         * @param nested the tag, generated by a TagAcceptorFactory
         * @throws com.github.jelf.xml.XmlParserException on fatal errors or if nested tag of this type not supported
         */
        @Override
        public void addNested(@NotNull TagAcceptor nested) throws XmlParserException {
            throw new XmlParserException("a","nested tag supplied");
        }

        /**
         * Sets the value of tag to string
         *
         * @param value tag body without any spaces in start or end
         * @throws com.github.jelf.xml.XmlParserException on fatal errors
         */
        @Override
        public void setValue(@Nullable String value) throws XmlParserException {
            this.value=value;
        }

        public @Nullable String getHref() {
            return href;
        }

        public @Nullable String getValue() {
            return value;
        }
    }

    /**
     * ATagFactory can generate only ATags
     *
     * @param name name of tag
     * @return new tag or null if tag not found (it would be used in inheritance)
     * @throws com.github.jelf.xml.XmlParserException on fatal errors
     */
    @Override
    public @Nullable TagAcceptor getTagAcceptor(@NotNull String name) throws XmlParserException {
        if("a".equals(name)) return new ATag();
        return null; //should always return null if tag not found
    }
}

/**
 * Now we want to add lists of A Tags
 */
class ListTagFactory extends ATagFactory {
    /**
     * This class is not declared final, as it not supposed to be final. We will inherit a final class later
     */
    static class ListTag extends SimpleTagAcceptor {

        List<ATag> aTagList = new ArrayList<ATag>();

        /**
         Ignore it
         */
        @Override
        public void addParam(@NotNull String name, @Nullable String value) throws XmlParserException {}

        /**
         * Adds nested ATag.
         *
         * @param nested the tag, generated by a TagAcceptorFactory
         * @throws com.github.jelf.xml.XmlParserException on fatal errors or if nested tag of this type not supported
         */
        @Override
        public void addNested(@NotNull TagAcceptor nested) throws XmlParserException {
            if(nested instanceof ATag) {
                aTagList.add((ATag) nested);
                return;
            }
            throw new XmlParserException("list","unknown nested tag supplied");
        }

        /**
         * Throws exception
         *
         * @param value tag body without any spaces in start or end
         * @throws com.github.jelf.xml.XmlParserException on fatal errors
         */
        @Override
        public void setValue(@Nullable String value) throws XmlParserException {
            throw new XmlParserException("list","unexpected value supplied");
        }

        public @NotNull List<ATag> getATagSet() {
            return aTagList;
        }
    }

    /**
     * Making ListTag final to future use
     */
    final class ListTagFin extends ListTag {}

    /**
     * ListTagFactory inherits ATagFactory and also generates ListTags
     *
     * @param name name of tag
     * @return new tag or null if tag not found (it would be used in inheritance)
     * @throws com.github.jelf.xml.XmlParserException on fatal errors
     */
    @Override
    public @Nullable TagAcceptor getTagAcceptor(@NotNull String name) throws XmlParserException {

        TagAcceptor sup = super.getTagAcceptor(name);
        if(sup!=null) return sup;

        if("list".equals(name)) return new ListTagFin();
        return null; //should always return null if tag not found
    }
}

/**
 * Describes User - a simple structure
 */
class User {
    private String firstName, secondName;
    private int passHash;
    public User(@NotNull String firstName, @NotNull String secondName) {
        this.firstName=firstName;
        this.secondName=secondName;
    }
    public void setPassword(String raw) {
        passHash=hashPassword(raw);
    }
    public boolean checkPassword(String attempt) {
        return passHash==hashPassword(attempt);
    }
    protected int hashPassword(String raw) {
        int res=0;
        for(char c: raw.toCharArray()) {
            res+=c;
        }
        return res;
    }

    public String getSecondName() {
        return secondName;
    }

    public String getFirstName() {
        return firstName;
    }
}

/**
 * This factory builds objects of known structure - User
 */
class UserTagFactory implements TagAcceptorFactory {

    final class UserTag extends TagAcceptorWithDictionaryParams {

        private User user=null;

        /**
         * Constructs user object and sets up it's password if supplied
         *
         * @param params Map with all supplied parameters as keys and their values as values
         * @throws com.github.jelf.xml.XmlParserException on fatal errors. Should not be thrown on extra parameters in most cases, because odd parameters should better could be supplied
         */
        @Override
        protected void withParams(@NotNull HashMap<String, String> params) throws XmlParserException {
            user = new User(params.get("firstName"),params.get("secondName"));
            if(params.containsKey("password")) user.setPassword(params.get("password"));
        }

        /**
         * Throws exception
         *
         * @param nested the tag, generated by a TagAcceptorFactory
         * @throws com.github.jelf.xml.XmlParserException on fatal errors or if nested tag of this type not supported
         */
        @Override
        public void addNested(@NotNull TagAcceptor nested) throws XmlParserException {
            throw new XmlParserException("user","unexpected tag supplied");
        }

        /**
         * Throws exception
         *
         * @param value tag body without any spaces in start or end
         * @throws com.github.jelf.xml.XmlParserException on fatal errors
         */
        @Override
        public void setValue(@Nullable String value) throws XmlParserException {
            throw new XmlParserException("user","unexpected value supplied");

        }

        public @NotNull User getUser() throws XmlParserException {
            if(user==null) throw new XmlParserException("user","WTF: user required before init");
            return user;
        }
    }

    /**
     * UserTagFactory can generate only UserTags
     *
     * @param name name of tag
     * @return new tag or null if tag not found (it would be used in inheritance)
     * @throws com.github.jelf.xml.XmlParserException on fatal errors
     */
    @Override
    public @Nullable TagAcceptor getTagAcceptor(@NotNull String name) throws XmlParserException {

        if("user".equals(name)) return new UserTag();
        return null;
    }
}

/**
 * This Factory inerhits both UserTagFactory and ListTagFactory and overrides listTag as example of inheritance
 */
class RootTagFactory implements TagAcceptorFactory {

    private static final UserTagFactory userTagFactory = new UserTagFactory();
    private static final ListTagFactory listTagFactory = new ListTagFactory();

    final class ListTag extends ListTagFactory.ListTag {
        private Set<User> users = new HashSet<User>();

        public Set<User> getUsers() {
            return users;
        }

        /**
         * Adds nested ATag.
         *
         * @param nested the tag, generated by a TagAcceptorFactory
         * @throws com.github.jelf.xml.XmlParserException on fatal errors or if nested tag of this type not supported
         */
        @Override
        public void addNested(@NotNull TagAcceptor nested) throws XmlParserException {
            if(nested instanceof ListTagFactory.ATag) {
                aTagList.add((ATagFactory.ATag) nested);
                return;
            }
            if(nested instanceof UserTagFactory.UserTag) {
                users.add(((UserTagFactory.UserTag) nested).getUser());
                return;
            }
            throw new XmlParserException("list","unknown nested tag supplied");
        }
    }

    /**
     * Firstly overrides "list" to match new ListTag, then includes all inherited tags.
     *
     * @param name name of tag
     * @return new tag or null if tag not found (it would be used in inheritance)
     * @throws com.github.jelf.xml.XmlParserException on fatal errors
     */
    @Nullable
    @Override
    public TagAcceptor getTagAcceptor(@NotNull String name) throws XmlParserException {

        if("list".equals(name)) return new ListTag();

        TagAcceptor sup;
        for(TagAcceptorFactory factory : new TagAcceptorFactory[]{listTagFactory,userTagFactory}) {
            sup=factory.getTagAcceptor(name);
            if(sup!=null) return sup;
        }
        return null;
    }
}


public class CustomFactoryTest extends AndroidTestCase {
    //TODO: write
}
